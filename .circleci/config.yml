version: 2

checkout-linux: &checkout-linux
  attach_workspace:
    at: /root

move-linux-src: &move-linux-src
  run:
    name: move source to go path
    command: |
      mv ~/project/* /go/src/github.com/textileio/textile-go/

jobs:

  persist-checkout:
    docker:
    - image: python
    steps:
    - checkout
    - run:
        name: clean up git
        command: |
          rm -rf .git
    - persist_to_workspace:
        root: /root
        paths:
        - project

  unit-test:
    docker:
    - image: textile/builder:1.10.3
    - image: mongo:3.4.10
    working_directory: /go/src/github.com/textileio/textile-go
    steps:
    - *checkout-linux
    - *move-linux-src
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install deps
        command: |
          dep ensure
          gx install
    - save_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
        paths:
        - /go/src/github.com/textileio/textile-go/vendor
    - save_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
        paths:
        - /go/src/gx
    - run:
        name: install textile
        command: |
          go build -i -o textile textile.go
          mv textile $GOPATH/bin/
    - run:
        name: run tests
        command: |
          textile -d -n -g=127.0.0.1:8080 --cafe-bind-addr=0.0.0.0:8000 --cafe-token-secret=swarmmmmm --cafe-referral-key=woohoo! --cafe-db-hosts=0.0.0.0:27017 --cafe-db-name=textile_db &
          sleep 5
          ./test_compile.sh
        environment:
          # client node settings
          CAFE_ADDR: http://0.0.0.0:8000
          CAFE_DB_HOSTS: 0.0.0.0:27017
          CAFE_DB_NAME: textile_db
          CAFE_TOKEN_SECRET: swarmmmmm
          CAFE_REFERRAL_KEY: woohoo!

  build-cli-linux:
    docker:
    - image: textile/builder:1.10.3
    working_directory: /go/src/github.com/textileio/textile-go
    steps:
    - *checkout-linux
    - *move-linux-src
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install gox
        command: |
          go get github.com/mitchellh/gox
    - run:
        name: compile
        command: |
          gox -osarch="linux/amd64 linux/386 linux/arm" -output="{{.OS}}-{{.Arch}}"
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/cli
          mkdir -p ${OUT}
          mkdir -p tmp
          cp LICENSE tmp/
          cp dist/README.md tmp/
          cp dist/install.sh tmp/
          cd tmp
          declare -a arr=("linux-amd64" "linux-386" "linux-arm")
          for i in "${arr[@]}"
          do
              OSARCH=${i%.*}
              EXT=$([[ "$i" = *.* ]] && echo ".${i##*.}" || echo '')
              cp ../${i} textile${EXT}
              if [ "${EXT}" == ".exe" ]; then
                  zip textile-go_${VERSION}_${OSARCH}.zip LICENSE README.md install.sh textile${EXT}
                  mv textile-go_${VERSION}_${OSARCH}.zip ${OUT}/
              else
                  tar -czvf textile-go_${VERSION}_${OSARCH}.tar.gz LICENSE README.md install.sh textile${EXT}
                  mv textile-go_${VERSION}_${OSARCH}.tar.gz ${OUT}/
              fi
          done
          cd .. && rm -rf tmp
    - persist_to_workspace:
        root: ~/dist
        paths:
        - cli
    - store_artifacts:
        path: ~/dist/cli

  build-cli-darwin-windows:
    macos:
      xcode: "9.4.0"
    environment:
      GOPATH: /Users/distiller/go
    working_directory: ~/go/src/github.com/textileio/textile-go
    steps:
    - checkout
    - run:
        name: install golang
        command: |
          brew install golang
    - run:
        name: install dep
        command: brew install dep
    - run:
        name: install gx
        command: |
          go get -u github.com/whyrusleeping/gx
          go get -u github.com/whyrusleeping/gx-go
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install deps
        command: |
          dep ensure
          ~/go/bin/gx install
    - save_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
        paths:
        - ~/go/src/github.com/textileio/textile-go/vendor
    - save_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
        paths:
        - ~/go/src/gx
    - run:
        name: install gox
        command: |
          go get github.com/mitchellh/gox
    - run:
        name: install mingw-w64
        command: |
          brew install mingw-w64
    - run:
        name: cross-compile
        command: |
          export PATH=$PATH:$GOPATH/bin
          gox -osarch="linux/amd64 linux/386 linux/arm darwin/amd64" -output="{{.OS}}-{{.Arch}}"
          CC="x86_64-w64-mingw32-gcc" CXX="x86_64-w64-mingw32-g++" gox -cgo -osarch="windows/amd64" -output="{{.OS}}-{{.Arch}}"
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/cli
          mkdir -p ${OUT}
          mkdir -p tmp
          cp LICENSE tmp/
          cp dist/README.md tmp/
          cp dist/install.sh tmp/
          cd tmp
          declare -a arr=("linux-amd64" "linux-386" "linux-arm" "darwin-amd64" "windows-amd64.exe")
          for i in "${arr[@]}"
          do
              OSARCH=${i%.*}
              EXT=$([[ "$i" = *.* ]] && echo ".${i##*.}" || echo '')
              cp ../${i} textile${EXT}
              if [ "${EXT}" == ".exe" ]; then
                  zip textile-go_${VERSION}_${OSARCH}.zip LICENSE README.md install.sh textile${EXT}
                  mv textile-go_${VERSION}_${OSARCH}.zip ${OUT}/
              else
                  tar -czvf textile-go_${VERSION}_${OSARCH}.tar.gz LICENSE README.md install.sh textile${EXT}
                  mv textile-go_${VERSION}_${OSARCH}.tar.gz ${OUT}/
              fi
          done
          cd .. && rm -rf tmp
    - persist_to_workspace:
        root: ~/dist
        paths:
        - cli
    - store_artifacts:
        path: ~/dist/cli

  build-desktop-darwin-windows:
    macos:
      xcode: "9.4.0"
    environment:
      GOPATH: /Users/distiller/go
    working_directory: ~/go/src/github.com/textileio/textile-go
    steps:
    - checkout
    - run:
        name: install golang
        command: |
          brew install golang
    - run:
        name: install dep
        command: brew install dep
    - run:
        name: install gx
        command: |
          go get -u github.com/whyrusleeping/gx
          go get -u github.com/whyrusleeping/gx-go
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install deps
        command: |
          dep ensure
          ~/go/bin/gx install
    - save_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
        paths:
        - ~/go/src/github.com/textileio/textile-go/vendor
    - save_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
        paths:
        - ~/go/src/gx
    - run:
        name: install mingw-w64
        command: |
          brew install mingw-w64
    - run:
        name: install astilectron-bundler
        command: |
          go install ./vendor/github.com/asticode/go-astilectron-bundler/astilectron-bundler
    - run:
        name: compile
        command: |
          export PATH=$PATH:$GOPATH/bin
          cd desktop
          astilectron-bundler -v -c bundler.darwin.json
          astilectron-bundler -v -c bundler.windows.json
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/desktop
          mkdir -p ${OUT}
          WD=~/go/src/github.com/textileio/textile-go
          cd ${WD}/desktop/output/darwin-amd64
          tar -czvf Textile_${VERSION}_darwin-amd64.tar.gz Textile.app
          mv Textile_${VERSION}_darwin-amd64.tar.gz ${OUT}/
          cd ${WD}/desktop/output/windows-amd64
          zip Textile_${VERSION}_windows-amd64.zip Textile.exe
          mv Textile_${VERSION}_windows-amd64.zip ${OUT}/
    - persist_to_workspace:
        root: ~/dist
        paths:
        - desktop
    - store_artifacts:
        path: ~/dist/desktop

  build-desktop-linux:
    docker:
    - image: textile/builder:1.10.3
    working_directory: /go/src/github.com/textileio/textile-go
    steps:
    - *checkout-linux
    - *move-linux-src
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install astilectron-bundler
        command: |
          go install ./vendor/github.com/asticode/go-astilectron-bundler/astilectron-bundler
    - run:
        name: compile
        command: |
          cd desktop && astilectron-bundler -v -c bundler.linux.json
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/desktop
          mkdir -p ${OUT}
          WD=/go/src/github.com/textileio/textile-go
          cd ${WD}/desktop/output/linux-amd64
          tar -czvf Textile_${VERSION}_linux-amd64.tar.gz Textile
          mv Textile_${VERSION}_linux-amd64.tar.gz ${OUT}/
    - persist_to_workspace:
        root: ~/dist
        paths:
        - desktop
    - store_artifacts:
        path: ~/dist/desktop

  build-ios-framework:
    macos:
      xcode: "9.4.0"
    environment:
      GOPATH: /Users/distiller/go
    working_directory: ~/go/src/github.com/textileio/textile-go
    steps:
    - checkout
    - run:
        name: install golang
        command: |
          brew install golang
    - run:
        name: install dep
        command: brew install dep
    - run:
        name: install gx
        command: |
          go get -u github.com/whyrusleeping/gx
          go get -u github.com/whyrusleeping/gx-go
    - restore_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install deps
        command: |
          dep ensure
          ~/go/bin/gx install
    - save_cache:
        key: dep-v1-{{ checksum "Gopkg.lock" }}-{{ arch }}
        paths:
        - ~/go/src/github.com/textileio/textile-go/vendor
    - save_cache:
        key: gx-v1-{{ checksum "package.json" }}-{{ arch }}
        paths:
        - ~/go/src/gx
    - run:
        name: install gomobile
        command: |
          go get golang.org/x/mobile/cmd/gomobile
    - run:
        name: build ios framework
        command: |
          export PATH=$PATH:$GOPATH/bin
          gomobile init
          gomobile bind -target=ios/arm64 github.com/textileio/textile-go/mobile
        environment:
          CGO_CFLAGS_ALLOW: '-fmodules|-fblocks'
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/ios_framework
          mkdir -p ${OUT}
          tar -czvf textile-go_${VERSION}_ios-framework.tar.gz Mobile.framework
          mv textile-go_${VERSION}_ios-framework.tar.gz ${OUT}/
    - persist_to_workspace:
        root: ~/dist
        paths:
        - ios_framework
    - store_artifacts:
        path: ~/dist/ios_framework

  build-android-framework:
    environment:
      _JAVA_OPTIONS: "-Xmx512m"
    docker:
    - image: circleci/android:api-26-alpha
    working_directory: ~/go/src/github.com/textileio/textile-go
    steps:
    - checkout
    - run:
        name: install golang
        command: |
          wget https://dl.google.com/go/go1.10.3.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.10.3.linux-amd64.tar.gz
    - run:
        name: install dep
        command: |
          export PATH=$PATH:/usr/local/go/bin
          mkdir -p ~/go/bin
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    - run:
        name: install gx
        command: |
          export PATH=$PATH:/usr/local/go/bin
          go get -u github.com/whyrusleeping/gx
          go get -u github.com/whyrusleeping/gx-go
    - restore_cache:
        key: dep-v1-android-{{ checksum "Gopkg.lock" }}-{{ arch }}
    - restore_cache:
        key: gx-v1-android-{{ checksum "package.json" }}-{{ arch }}
    - run:
        name: install deps
        command: |
          ~/go/bin/dep ensure
          ~/go/bin/gx install
    - save_cache:
        key: dep-v1-android-{{ checksum "Gopkg.lock" }}-{{ arch }}
        paths:
        - ~/go/src/github.com/textileio/textile-go/vendor
    - save_cache:
        key: gx-v1-android-{{ checksum "package.json" }}-{{ arch }}
        paths:
        - ~/go/src/gx
    - run:
        name: install ndk-bundle
        command: |
          sdkmanager --install "ndk-bundle"
          sdkmanager --licenses
    - run:
        name: install gomobile
        command: |
          export PATH=$PATH:/usr/local/go/bin
          go get golang.org/x/mobile/cmd/gomobile
    - run:
        name: build android framework
        command: |
          export PATH=$PATH:/usr/local/go/bin
          export GOPATH=~/go
          export PATH=$PATH:$GOPATH/bin
          gomobile init -ndk /opt/android/sdk/ndk-bundle
          gomobile bind -target=android -o textilego.aar github.com/textileio/textile-go/mobile
    - run:
        name: collect artifacts
        command: |
          VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)
          if [ "${CIRCLE_TAG}" != "" ]; then
              VERSION=${CIRCLE_TAG}
          fi
          OUT=~/dist/android_aar
          mkdir -p ${OUT}
          tar -czvf textile-go_${VERSION}_android_aar.tar.gz textilego.aar
          mv textile-go_${VERSION}_android_aar.tar.gz ${OUT}/
    - persist_to_workspace:
        root: ~/dist
        paths:
        - android_aar
    - store_artifacts:
        path: ~/dist/android_aar

  release:
    docker:
    - image: cibuilds/github:0.10
    steps:
    - *checkout-linux
    - deploy:
        name: release all
        command: |
          mkdir -p ~/dist
          mv ~/cli/* ~/dist/
          mv ~/desktop/* ~/dist/
          mv ~/ios_framework/* ~/dist/
          mv ~/android_aar/* ~/dist/
          ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ~/dist/

workflows:
  version: 2
  textile-go:
    jobs:
    - persist-checkout:
        filters:
          tags:
            only: /.*/
    - unit-test:
        requires:
        - persist-checkout
        filters:
          tags:
            only: /.*/
    - build-cli-darwin-windows:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - build-cli-linux:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - build-desktop-darwin-windows:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - build-desktop-linux:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - build-ios-framework:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - build-android-framework:
        requires:
        - unit-test
        filters:
          branches:
            only: master
          tags:
            only: /.*/
    - release:
        requires:
        - build-cli-darwin-windows
        - build-cli-linux
        - build-desktop-darwin-windows
        - build-desktop-linux
        - build-ios-framework
        - build-android-framework
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v.*/
