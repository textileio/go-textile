// Code generated by protoc-gen-go. DO NOT EDIT.
// source: model.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Type controls read (R), annotate (A), and write (W) access
type Thread_Type int32

const (
	Thread_Private  Thread_Type = 0
	Thread_ReadOnly Thread_Type = 1
	Thread_Public   Thread_Type = 2
	Thread_Open     Thread_Type = 3
)

var Thread_Type_name = map[int32]string{
	0: "Private",
	1: "ReadOnly",
	2: "Public",
	3: "Open",
}
var Thread_Type_value = map[string]int32{
	"Private":  0,
	"ReadOnly": 1,
	"Public":   2,
	"Open":     3,
}

func (x Thread_Type) String() string {
	return proto.EnumName(Thread_Type_name, int32(x))
}
func (Thread_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{1, 0}
}

// Sharing controls if (Y/N) a thread can be shared
type Thread_Sharing int32

const (
	Thread_NotShared  Thread_Sharing = 0
	Thread_InviteOnly Thread_Sharing = 1
	Thread_Shared     Thread_Sharing = 2
)

var Thread_Sharing_name = map[int32]string{
	0: "NotShared",
	1: "InviteOnly",
	2: "Shared",
}
var Thread_Sharing_value = map[string]int32{
	"NotShared":  0,
	"InviteOnly": 1,
	"Shared":     2,
}

func (x Thread_Sharing) String() string {
	return proto.EnumName(Thread_Sharing_name, int32(x))
}
func (Thread_Sharing) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{1, 1}
}

// State indicates the loading state
type Thread_State int32

const (
	Thread_LoadingBehind Thread_State = 0
	Thread_Loaded        Thread_State = 1
	Thread_LoadingAhead  Thread_State = 2
)

var Thread_State_name = map[int32]string{
	0: "LoadingBehind",
	1: "Loaded",
	2: "LoadingAhead",
}
var Thread_State_value = map[string]int32{
	"LoadingBehind": 0,
	"Loaded":        1,
	"LoadingAhead":  2,
}

func (x Thread_State) String() string {
	return proto.EnumName(Thread_State_name, int32(x))
}
func (Thread_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{1, 2}
}

type Contact struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address              string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Username             string               `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Avatar               string               `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Inboxes              []*Cafe              `protobuf:"bytes,5,rep,name=inboxes,proto3" json:"inboxes,omitempty"`
	Created              *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
	Updated              *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Contact) Reset()         { *m = Contact{} }
func (m *Contact) String() string { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()    {}
func (*Contact) Descriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{0}
}
func (m *Contact) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contact.Unmarshal(m, b)
}
func (m *Contact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contact.Marshal(b, m, deterministic)
}
func (dst *Contact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contact.Merge(dst, src)
}
func (m *Contact) XXX_Size() int {
	return xxx_messageInfo_Contact.Size(m)
}
func (m *Contact) XXX_DiscardUnknown() {
	xxx_messageInfo_Contact.DiscardUnknown(m)
}

var xxx_messageInfo_Contact proto.InternalMessageInfo

func (m *Contact) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Contact) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Contact) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Contact) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *Contact) GetInboxes() []*Cafe {
	if m != nil {
		return m.Inboxes
	}
	return nil
}

func (m *Contact) GetCreated() *timestamp.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Contact) GetUpdated() *timestamp.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

type Thread struct {
	Id                   string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key                  string         `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Sk                   []byte         `protobuf:"bytes,3,opt,name=sk,proto3" json:"sk,omitempty"`
	Name                 string         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Schema               string         `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Initiator            string         `protobuf:"bytes,6,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Type                 Thread_Type    `protobuf:"varint,7,opt,name=type,proto3,enum=Thread_Type" json:"type,omitempty"`
	Sharing              Thread_Sharing `protobuf:"varint,8,opt,name=sharing,proto3,enum=Thread_Sharing" json:"sharing,omitempty"`
	Members              []string       `protobuf:"bytes,9,rep,name=members,proto3" json:"members,omitempty"`
	State                Thread_State   `protobuf:"varint,10,opt,name=state,proto3,enum=Thread_State" json:"state,omitempty"`
	Head                 string         `protobuf:"bytes,11,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Thread) Reset()         { *m = Thread{} }
func (m *Thread) String() string { return proto.CompactTextString(m) }
func (*Thread) ProtoMessage()    {}
func (*Thread) Descriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{1}
}
func (m *Thread) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Thread.Unmarshal(m, b)
}
func (m *Thread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Thread.Marshal(b, m, deterministic)
}
func (dst *Thread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Thread.Merge(dst, src)
}
func (m *Thread) XXX_Size() int {
	return xxx_messageInfo_Thread.Size(m)
}
func (m *Thread) XXX_DiscardUnknown() {
	xxx_messageInfo_Thread.DiscardUnknown(m)
}

var xxx_messageInfo_Thread proto.InternalMessageInfo

func (m *Thread) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Thread) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Thread) GetSk() []byte {
	if m != nil {
		return m.Sk
	}
	return nil
}

func (m *Thread) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Thread) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *Thread) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *Thread) GetType() Thread_Type {
	if m != nil {
		return m.Type
	}
	return Thread_Private
}

func (m *Thread) GetSharing() Thread_Sharing {
	if m != nil {
		return m.Sharing
	}
	return Thread_NotShared
}

func (m *Thread) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Thread) GetState() Thread_State {
	if m != nil {
		return m.State
	}
	return Thread_LoadingBehind
}

func (m *Thread) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

type FileIndex struct {
	Mill                 string               `protobuf:"bytes,1,opt,name=mill,proto3" json:"mill,omitempty"`
	Checksum             string               `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Source               string               `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Opts                 string               `protobuf:"bytes,4,opt,name=opts,proto3" json:"opts,omitempty"`
	Hash                 string               `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Key                  string               `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Media                string               `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	Name                 string               `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Size                 int64                `protobuf:"varint,9,opt,name=size,proto3" json:"size,omitempty"`
	Added                *timestamp.Timestamp `protobuf:"bytes,10,opt,name=added,proto3" json:"added,omitempty"`
	Meta                 *_struct.Struct      `protobuf:"bytes,11,opt,name=meta,proto3" json:"meta,omitempty"`
	Targets              []string             `protobuf:"bytes,12,rep,name=targets,proto3" json:"targets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *FileIndex) Reset()         { *m = FileIndex{} }
func (m *FileIndex) String() string { return proto.CompactTextString(m) }
func (*FileIndex) ProtoMessage()    {}
func (*FileIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{2}
}
func (m *FileIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileIndex.Unmarshal(m, b)
}
func (m *FileIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileIndex.Marshal(b, m, deterministic)
}
func (dst *FileIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileIndex.Merge(dst, src)
}
func (m *FileIndex) XXX_Size() int {
	return xxx_messageInfo_FileIndex.Size(m)
}
func (m *FileIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_FileIndex.DiscardUnknown(m)
}

var xxx_messageInfo_FileIndex proto.InternalMessageInfo

func (m *FileIndex) GetMill() string {
	if m != nil {
		return m.Mill
	}
	return ""
}

func (m *FileIndex) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *FileIndex) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *FileIndex) GetOpts() string {
	if m != nil {
		return m.Opts
	}
	return ""
}

func (m *FileIndex) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *FileIndex) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FileIndex) GetMedia() string {
	if m != nil {
		return m.Media
	}
	return ""
}

func (m *FileIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileIndex) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *FileIndex) GetAdded() *timestamp.Timestamp {
	if m != nil {
		return m.Added
	}
	return nil
}

func (m *FileIndex) GetMeta() *_struct.Struct {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *FileIndex) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

type Cafe struct {
	Peer                 string   `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Api                  string   `protobuf:"bytes,3,opt,name=api,proto3" json:"api,omitempty"`
	Protocol             string   `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Node                 string   `protobuf:"bytes,5,opt,name=node,proto3" json:"node,omitempty"`
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Swarm                []string `protobuf:"bytes,7,rep,name=swarm,proto3" json:"swarm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cafe) Reset()         { *m = Cafe{} }
func (m *Cafe) String() string { return proto.CompactTextString(m) }
func (*Cafe) ProtoMessage()    {}
func (*Cafe) Descriptor() ([]byte, []int) {
	return fileDescriptor_model_9ed60bf4b94a74e9, []int{3}
}
func (m *Cafe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cafe.Unmarshal(m, b)
}
func (m *Cafe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cafe.Marshal(b, m, deterministic)
}
func (dst *Cafe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cafe.Merge(dst, src)
}
func (m *Cafe) XXX_Size() int {
	return xxx_messageInfo_Cafe.Size(m)
}
func (m *Cafe) XXX_DiscardUnknown() {
	xxx_messageInfo_Cafe.DiscardUnknown(m)
}

var xxx_messageInfo_Cafe proto.InternalMessageInfo

func (m *Cafe) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *Cafe) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Cafe) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *Cafe) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Cafe) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Cafe) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Cafe) GetSwarm() []string {
	if m != nil {
		return m.Swarm
	}
	return nil
}

func init() {
	proto.RegisterType((*Contact)(nil), "Contact")
	proto.RegisterType((*Thread)(nil), "Thread")
	proto.RegisterType((*FileIndex)(nil), "FileIndex")
	proto.RegisterType((*Cafe)(nil), "Cafe")
	proto.RegisterEnum("Thread_Type", Thread_Type_name, Thread_Type_value)
	proto.RegisterEnum("Thread_Sharing", Thread_Sharing_name, Thread_Sharing_value)
	proto.RegisterEnum("Thread_State", Thread_State_name, Thread_State_value)
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_model_9ed60bf4b94a74e9) }

var fileDescriptor_model_9ed60bf4b94a74e9 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x7e, 0x6c, 0x59, 0xd7, 0x4e, 0x3e, 0x7d, 0x43, 0x69, 0x87, 0x10, 0x88, 0x71, 0x37,
	0x2e, 0x05, 0xa7, 0xb8, 0x81, 0x76, 0xdb, 0x04, 0x0a, 0x81, 0xd2, 0x04, 0x25, 0xab, 0xee, 0xc6,
	0x9a, 0x1b, 0x6b, 0xb0, 0xfe, 0x98, 0x19, 0xa5, 0x71, 0x1f, 0xa6, 0x4f, 0xd3, 0x6d, 0xdf, 0xa6,
	0x0f, 0x50, 0x66, 0x34, 0x72, 0x4a, 0x03, 0xe9, 0xee, 0x9e, 0xfb, 0x33, 0x3e, 0xe7, 0x9e, 0x2b,
	0xc3, 0xb8, 0xac, 0x39, 0x16, 0x8b, 0x46, 0xd6, 0xba, 0x3e, 0x3c, 0x5e, 0xd7, 0xf5, 0xba, 0xc0,
	0x13, 0x8b, 0x56, 0xed, 0xed, 0x89, 0x16, 0x25, 0x2a, 0xcd, 0xca, 0xc6, 0x35, 0x1c, 0xfd, 0xdd,
	0xa0, 0xb4, 0x6c, 0x33, 0xdd, 0x55, 0x67, 0xbf, 0x3c, 0x88, 0xce, 0xeb, 0x4a, 0xb3, 0x4c, 0x93,
	0x03, 0xf0, 0x05, 0xa7, 0xde, 0xd4, 0x9b, 0xc7, 0xa9, 0x2f, 0x38, 0xa1, 0x10, 0x31, 0xce, 0x25,
	0x2a, 0x45, 0x7d, 0x9b, 0xec, 0x21, 0x39, 0x84, 0x51, 0xab, 0x50, 0x56, 0xac, 0x44, 0x1a, 0xd8,
	0xd2, 0x0e, 0x93, 0xe7, 0x30, 0x64, 0x77, 0x4c, 0x33, 0x49, 0x43, 0x5b, 0x71, 0x88, 0x1c, 0x43,
	0x24, 0xaa, 0x55, 0x7d, 0x8f, 0x8a, 0x0e, 0xa6, 0xc1, 0x7c, 0xbc, 0x1c, 0x2c, 0xce, 0xd9, 0x2d,
	0xa6, 0x7d, 0x96, 0x9c, 0x42, 0x94, 0x49, 0x64, 0x1a, 0x39, 0x1d, 0x4e, 0xbd, 0xf9, 0x78, 0x79,
	0xb8, 0xe8, 0xa8, 0x2f, 0x7a, 0xea, 0x8b, 0x9b, 0x5e, 0x5b, 0xda, 0xb7, 0x9a, 0xa9, 0xb6, 0xe1,
	0x76, 0x2a, 0xfa, 0xf7, 0x94, 0x6b, 0x9d, 0xfd, 0x0c, 0x60, 0x78, 0x93, 0x4b, 0x64, 0xfc, 0x91,
	0xea, 0x04, 0x82, 0x0d, 0x6e, 0x9d, 0x62, 0x13, 0x9a, 0x0e, 0xb5, 0xb1, 0x3a, 0x27, 0xa9, 0xaf,
	0x36, 0x84, 0x40, 0x68, 0x95, 0x77, 0xfa, 0xc2, 0x5e, 0xb5, 0xca, 0x72, 0x2c, 0x19, 0x1d, 0x74,
	0xaa, 0x3b, 0x44, 0x8e, 0x20, 0x16, 0x95, 0xd0, 0x82, 0xe9, 0x5a, 0x5a, 0x59, 0x71, 0xfa, 0x90,
	0x20, 0x53, 0x08, 0xf5, 0xb6, 0x41, 0xcb, 0xfc, 0x60, 0x39, 0x59, 0x74, 0x94, 0x16, 0x37, 0xdb,
	0x06, 0x53, 0x5b, 0x21, 0xaf, 0x20, 0x52, 0x39, 0x93, 0xa2, 0x5a, 0xd3, 0x91, 0x6d, 0xfa, 0xaf,
	0x6f, 0xba, 0xee, 0xd2, 0x69, 0x5f, 0x37, 0x76, 0x95, 0x58, 0xae, 0x50, 0x2a, 0x1a, 0x4f, 0x03,
	0x63, 0x97, 0x83, 0xe4, 0x25, 0x0c, 0x94, 0x66, 0x1a, 0x29, 0xd8, 0x27, 0xf6, 0x77, 0x4f, 0x98,
	0x64, 0xda, 0xd5, 0x8c, 0xaa, 0x1c, 0x19, 0xa7, 0xe3, 0x4e, 0x95, 0x89, 0x67, 0xef, 0x20, 0x34,
	0x5c, 0xc8, 0x18, 0xa2, 0x2b, 0x29, 0xee, 0x98, 0xc6, 0x64, 0x8f, 0x4c, 0x60, 0x94, 0x22, 0xe3,
	0x97, 0x55, 0xb1, 0x4d, 0x3c, 0x02, 0x30, 0xbc, 0x6a, 0x57, 0x85, 0xc8, 0x12, 0x9f, 0x8c, 0x20,
	0xbc, 0x6c, 0xb0, 0x4a, 0x82, 0xd9, 0x29, 0x44, 0x8e, 0x1f, 0xd9, 0x87, 0xf8, 0x73, 0xad, 0x0d,
	0x42, 0x9e, 0xec, 0x91, 0x03, 0x80, 0x8b, 0xea, 0x4e, 0x68, 0x7c, 0x98, 0x77, 0x35, 0x7f, 0xf6,
	0x1e, 0x06, 0x96, 0x12, 0xf9, 0x1f, 0xf6, 0x3f, 0xd5, 0x8c, 0x8b, 0x6a, 0x7d, 0x86, 0xb9, 0xa8,
	0xcc, 0x1c, 0xc0, 0xd0, 0xa4, 0x90, 0x27, 0x1e, 0x49, 0x60, 0xe2, 0xca, 0x1f, 0x0c, 0xcd, 0xc4,
	0x9f, 0xfd, 0xf0, 0x21, 0xfe, 0x28, 0x0a, 0xbc, 0xa8, 0x38, 0xde, 0x1b, 0x29, 0xa5, 0x28, 0x0a,
	0x67, 0xaa, 0x8d, 0xcd, 0xc9, 0x66, 0x39, 0x66, 0x1b, 0xd5, 0x96, 0xce, 0xdb, 0x1d, 0xb6, 0xe6,
	0xd5, 0xad, 0xcc, 0xfa, 0x63, 0x76, 0xc8, 0xbc, 0x53, 0x37, 0x5a, 0xf5, 0x46, 0x9b, 0xd8, 0xae,
	0x89, 0xa9, 0xdc, 0xd9, 0x6c, 0xe3, 0xfe, 0x64, 0x86, 0x0f, 0x27, 0xf3, 0x0c, 0x06, 0x25, 0x72,
	0xc1, 0xac, 0xb3, 0x71, 0xda, 0x81, 0xdd, 0xe1, 0x8c, 0xfe, 0x38, 0x1c, 0x02, 0xa1, 0x12, 0xdf,
	0x90, 0xc6, 0x53, 0x6f, 0x1e, 0xa4, 0x36, 0x26, 0x6f, 0x60, 0xc0, 0x38, 0x47, 0x6e, 0xfd, 0x7a,
	0xfa, 0xa2, 0xbb, 0x46, 0xf2, 0x1a, 0xc2, 0x12, 0x35, 0xb3, 0xe6, 0x8d, 0x97, 0x2f, 0x1e, 0x0d,
	0x5c, 0xdb, 0x6f, 0x3e, 0xb5, 0x4d, 0xe6, 0x50, 0x34, 0x93, 0x6b, 0xd4, 0x8a, 0x4e, 0xba, 0x43,
	0x71, 0x70, 0xf6, 0xdd, 0x83, 0xd0, 0x7c, 0x94, 0x86, 0x55, 0x83, 0x28, 0xfb, 0x0d, 0x9a, 0xf8,
	0x89, 0xbf, 0x83, 0x04, 0x02, 0xd6, 0x08, 0xb7, 0x3c, 0x13, 0x9a, 0x6d, 0xdb, 0xdf, 0xce, 0xea,
	0xc2, 0x6d, 0x6f, 0x87, 0xed, 0x16, 0x6a, 0x8e, 0xfd, 0x06, 0x4d, 0x6c, 0x5e, 0x68, 0x65, 0xd1,
	0x6f, 0xb0, 0x95, 0x85, 0xd9, 0xa0, 0xfa, 0xca, 0x64, 0x49, 0x23, 0x4b, 0xb1, 0x03, 0x67, 0xe1,
	0x17, 0xbf, 0x59, 0xad, 0x86, 0xf6, 0xad, 0xb7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x77,
	0xf2, 0xd9, 0x09, 0x05, 0x00, 0x00,
}
